<?php

namespace DvsaCommon\Enum;

/**
 * Enum class generated from the 'event_outcome_lookup' table
 *
 * DO NOT EDIT! -- THIS CLASS IS GENERATED BY mot-common-web-module/generate_enums.php
 * @codeCoverageIgnore
 */
class EventOutcomeName
{
    const AD = 'Pre MOTComp: Appeal disallowed';
    const AEFW = 'Formal Warning issued to Authorised Examiner';
    const AEMS = 'Minor shortcomings';
    const AES = 'Satisfactory';
    const AESTC = 'Short term cessation of AE at site';
    const AESCA = 'Short term cessation of AE at all sites';
    const AEU = 'Unsatisfactory';
    const AEW = 'Withdrawal of AE from all sites';
    const AEWD = 'Withdrawal of AE from site';
    const AFW = 'Pre MOTComp: Appeals Br: appeal inc formal warning';
    const APPRJ = 'Pre MOTComp: Appeals Br: reject out of time';
    const APPWD = 'Pre MOTComp: Appeals Br: appeal withdrawn';
    const AU = 'Pre MOTComp: Appeals Br: appeal upheld';
    const CDL = 'Contemplated Disciplinary Letter issued';
    const CDAWL = 'CDL closed by Advisory Warning Letter';
    const CDNFA = 'CDL closed by No Further Action';
    const CLOSD = 'Closed';
    const DBAST = 'DBA Satisfactory';
    const DNONE = 'No change';
    const DPLAN = 'Action plan updated';
    const DREF = 'Referred to Area Office';
    const DSDIS = 'Action plan suspended for disciplinary action';
    const DSLV1 = 'Action plan suspended for level 1 review';
    const DSOTH = 'Action plan suspended for other reasons';
    const NACOC = 'Appeal: doubt, circumstances of case';
    const NADAE = 'Appeals: appeal disallowed';
    const NAERR = 'Appeal: procedural error';
    const NAFWR = 'Formal Warning revoked';
    const NAHAR = 'Appeal: harsh original decision';
    const NALG1 = 'Appeal: legality, legal technicality';
    const NALG2 = 'Appeal: legality, action Ultra Vires';
    const NAPWR = 'Formal Warning revoked';
    const NAFWS = 'Formal Warning rescored';
    const NAFWU = 'Formal Warning upheld';
    const NAPFW = 'Appeals: appeal upheld but Formal Warning issued';
    const NAPRJ = 'Appeals: appeal rejected';
    const NAPU = 'Appeals: appeal upheld';
    const NAPWC = 'Appeals: Withdrawal to short term cessation';
    const NAPWD = 'Appeals: appeal withdrawn';
    const NASIG = 'Appeal: significant procedural error';
    const NATEC = 'Appeal: doubt, quality of technical evidence';
    const OPEN = 'Open';
    const F = 'Fail';
    const FW = 'Pre MOTComp: Formal Warning';
    const NAPDC = 'Appeals: Disqualification to short term cessation';
    const NTCD2 = 'Disqualification of NT 2 years';
    const NTCD5 = 'Disqualification of NT 5 years';
    const NTCFW = 'Formal Warning to NT';
    const NTD2 = 'Pre MOTComp: NT disqual testing 2 years';
    const NTD5 = 'Pre MOTComp: NT disqual testing 5 years';
    const NTDSQ = 'Disqualification of NT';
    const NTFW = 'Pre MOTComp: Formal Warning to NT';
    const NTMS = 'Minor shortcomings';
    const NTS = 'Satisfactory';
    const NTSTC = 'Short term cessation of NT';
    const NTU = 'Unsatisfactory';
    const P = 'Pass';
    const NOOUT = 'No outcome';
    const ATT = 'Attended';
    const VTSAA = 'VTS application approved';
    const VTSAC = 'VTS application status changes';
    const VTSAS = 'VTS application submitted';
    const VTSCD = 'VTS Authorisation Confirmation of details';
    const SUSP = 'Suspended';
    const FTA = 'Failed to attend';
    const DTN = 'Demo test needed';
    const DAR = 'Disciplinary Action report (DAR)';
    const ITR = 'Initial training required';
    const NFA = 'No further action';
    const AWL = 'Advisory Warning Letter ';
    const TA = 'Tester Active';

    /**
     * @return array of values for the type EventOutcomeName
     */
    public static function getAll()
    {
        return [
            self::AD,
            self::AEFW,
            self::AEMS,
            self::AES,
            self::AESTC,
            self::AESCA,
            self::AEU,
            self::AEW,
            self::AEWD,
            self::AFW,
            self::APPRJ,
            self::APPWD,
            self::AU,
            self::CDL,
            self::CDAWL,
            self::CDNFA,
            self::CLOSD,
            self::DBAST,
            self::DNONE,
            self::DPLAN,
            self::DREF,
            self::DSDIS,
            self::DSLV1,
            self::DSOTH,
            self::NACOC,
            self::NADAE,
            self::NAERR,
            self::NAFWR,
            self::NAHAR,
            self::NALG1,
            self::NALG2,
            self::NAPWR,
            self::NAFWS,
            self::NAFWU,
            self::NAPFW,
            self::NAPRJ,
            self::NAPU,
            self::NAPWC,
            self::NAPWD,
            self::NASIG,
            self::NATEC,
            self::OPEN,
            self::F,
            self::FW,
            self::NAPDC,
            self::NTCD2,
            self::NTCD5,
            self::NTCFW,
            self::NTD2,
            self::NTD5,
            self::NTDSQ,
            self::NTFW,
            self::NTMS,
            self::NTS,
            self::NTSTC,
            self::NTU,
            self::P,
            self::NOOUT,
            self::ATT,
            self::VTSAA,
            self::VTSAC,
            self::VTSAS,
            self::VTSCD,
            self::SUSP,
            self::FTA,
            self::DTN,
            self::DAR,
            self::ITR,
            self::NFA,
            self::AWL,
            self::TA,
        ];
    }

    /**
     * @param mixed $key a candidate EventOutcomeName value
     *
     * @return true if $key is in the list of known values for the type
     */
    public static function exists($key)
    {
        return in_array($key, self::getAll(), true);
    }
}
