<?php

namespace DvsaCommon\Enum;

/**
 * Enum class generated from the 'event_outcome_lookup' table
 *
 * DO NOT EDIT! -- THIS CLASS IS GENERATED BY mot-common-web-module/generate_enums.php
 * @codeCoverageIgnore
 */
class EventOutcomeCode
{
    const AD = 'AD';
    const AEFW = 'AEFW';
    const AEMS = 'AEMS';
    const AES = 'AES';
    const AESTC = 'AESTC';
    const AESCA = 'AESCA';
    const AEU = 'AEU';
    const AEW = 'AEW';
    const AEWD = 'AEWD';
    const AFW = 'AFW';
    const APPRJ = 'APPRJ';
    const APPWD = 'APPWD';
    const AU = 'AU';
    const CDL = 'CDL';
    const CDAWL = 'CDAWL';
    const CDNFA = 'CDNFA';
    const CLOSD = 'CLOSD';
    const DBAST = 'DBAST';
    const DNONE = 'DNONE';
    const DPLAN = 'DPLAN';
    const DREF = 'DREF';
    const DSDIS = 'DSDIS';
    const DSLV1 = 'DSLV1';
    const DSOTH = 'DSOTH';
    const NACOC = 'NACOC';
    const NADAE = 'NADAE';
    const NAERR = 'NAERR';
    const NAFWR = 'NAFWR';
    const NAHAR = 'NAHAR';
    const NALG1 = 'NALG1';
    const NALG2 = 'NALG2';
    const NAPWR = 'NAPWR';
    const NAFWS = 'NAFWS';
    const NAFWU = 'NAFWU';
    const NAPFW = 'NAPFW';
    const NAPRJ = 'NAPRJ';
    const NAPU = 'NAPU';
    const NAPWC = 'NAPWC';
    const NAPWD = 'NAPWD';
    const NASIG = 'NASIG';
    const NATEC = 'NATEC';
    const OPEN = 'OPEN';
    const F = 'F';
    const FW = 'FW';
    const NAPDC = 'NAPDC';
    const NTCD2 = 'NTCD2';
    const NTCD5 = 'NTCD5';
    const NTCFW = 'NTCFW';
    const NTD2 = 'NTD2';
    const NTD5 = 'NTD5';
    const NTDSQ = 'NTDSQ';
    const NTFW = 'NTFW';
    const NTMS = 'NTMS';
    const NTS = 'NTS';
    const NTSTC = 'NTSTC';
    const NTU = 'NTU';
    const P = 'P';
    const NOOUT = 'NOOUT';
    const ATT = 'ATT';
    const VTSAA = 'VTSAA';
    const VTSAC = 'VTSAC';
    const VTSAS = 'VTSAS';
    const VTSCD = 'VTSCD';
    const SUSP = 'SUSP';
    const FTA = 'FTA';
    const DTN = 'DTN';
    const DAR = 'DAR';
    const ITR = 'ITR';
    const NFA = 'NFA';
    const AWL = 'AWL';

    /**
     * @return array of values for the type EventOutcomeCode
     */
    public static function getAll()
    {
        return [
            self::AD,
            self::AEFW,
            self::AEMS,
            self::AES,
            self::AESTC,
            self::AESCA,
            self::AEU,
            self::AEW,
            self::AEWD,
            self::AFW,
            self::APPRJ,
            self::APPWD,
            self::AU,
            self::CDL,
            self::CDAWL,
            self::CDNFA,
            self::CLOSD,
            self::DBAST,
            self::DNONE,
            self::DPLAN,
            self::DREF,
            self::DSDIS,
            self::DSLV1,
            self::DSOTH,
            self::NACOC,
            self::NADAE,
            self::NAERR,
            self::NAFWR,
            self::NAHAR,
            self::NALG1,
            self::NALG2,
            self::NAPWR,
            self::NAFWS,
            self::NAFWU,
            self::NAPFW,
            self::NAPRJ,
            self::NAPU,
            self::NAPWC,
            self::NAPWD,
            self::NASIG,
            self::NATEC,
            self::OPEN,
            self::F,
            self::FW,
            self::NAPDC,
            self::NTCD2,
            self::NTCD5,
            self::NTCFW,
            self::NTD2,
            self::NTD5,
            self::NTDSQ,
            self::NTFW,
            self::NTMS,
            self::NTS,
            self::NTSTC,
            self::NTU,
            self::P,
            self::NOOUT,
            self::ATT,
            self::VTSAA,
            self::VTSAC,
            self::VTSAS,
            self::VTSCD,
            self::SUSP,
            self::FTA,
            self::DTN,
            self::DAR,
            self::ITR,
            self::NFA,
            self::AWL,
        ];
    }

    /**
     * @param mixed $key a candidate EventOutcomeCode value
     *
     * @return true if $key is in the list of known values for the type
     */
    public static function exists($key)
    {
        return in_array($key, self::getAll(), true);
    }
}
