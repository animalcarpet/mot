// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package mot2.flushldap_0_1;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: FlushLDAP Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.5.1.r118616
 * @status 
 */
public class FlushLDAP implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (databaseHost != null) {

				this.setProperty("databaseHost", databaseHost.toString());

			}

			if (databasePassword != null) {

				this.setProperty("databasePassword",
						databasePassword.toString());

			}

			if (databasePort != null) {

				this.setProperty("databasePort", databasePort.toString());

			}

			if (databaseUserName != null) {

				this.setProperty("databaseUserName",
						databaseUserName.toString());

			}

			if (ldapHost != null) {

				this.setProperty("ldapHost", ldapHost.toString());

			}

			if (ldapOU != null) {

				this.setProperty("ldapOU", ldapOU.toString());

			}

		}

		public String databaseHost;

		public String getDatabaseHost() {
			return this.databaseHost;
		}

		public String databasePassword;

		public String getDatabasePassword() {
			return this.databasePassword;
		}

		public Integer databasePort;

		public Integer getDatabasePort() {
			return this.databasePort;
		}

		public String databaseUserName;

		public String getDatabaseUserName() {
			return this.databaseUserName;
		}

		public String ldapHost;

		public String getLdapHost() {
			return this.ldapHost;
		}

		public String ldapOU;

		public String getLdapOU() {
			return this.ldapOU;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "FlushLDAP";
	private final String projectName = "MOT2";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(java.lang.Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					FlushLDAP.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(FlushLDAP.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tLDAPInput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLDAPInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLDAPInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLDAPOutput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLDAPInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLDAPInput_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class removalListStruct implements
			routines.system.IPersistableRow<removalListStruct> {
		final static byte[] commonByteArrayLock_MOT2_FlushLDAP = new byte[0];
		static byte[] commonByteArray_MOT2_FlushLDAP = new byte[0];

		public String oAthCounter;

		public String getOAthCounter() {
			return this.oAthCounter;
		}

		public String associatedName;

		public String getAssociatedName() {
			return this.associatedName;
		}

		public String audio;

		public String getAudio() {
			return this.audio;
		}

		public String businessCategory;

		public String getBusinessCategory() {
			return this.businessCategory;
		}

		public String carLicense;

		public String getCarLicense() {
			return this.carLicense;
		}

		public String cn;

		public String getCn() {
			return this.cn;
		}

		public String dc;

		public String getDc() {
			return this.dc;
		}

		public String departmentNumber;

		public String getDepartmentNumber() {
			return this.departmentNumber;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String destinationIndicator;

		public String getDestinationIndicator() {
			return this.destinationIndicator;
		}

		public String displayName;

		public String getDisplayName() {
			return this.displayName;
		}

		public String domain;

		public String getDomain() {
			return this.domain;
		}

		public String employeeNumber;

		public String getEmployeeNumber() {
			return this.employeeNumber;
		}

		public String employeeType;

		public String getEmployeeType() {
			return this.employeeType;
		}

		public String facsimileTelephoneNumber;

		public String getFacsimileTelephoneNumber() {
			return this.facsimileTelephoneNumber;
		}

		public String givenName;

		public String getGivenName() {
			return this.givenName;
		}

		public String groupOfNames;

		public String getGroupOfNames() {
			return this.groupOfNames;
		}

		public String homePhone;

		public String getHomePhone() {
			return this.homePhone;
		}

		public String homePostalAddress;

		public String getHomePostalAddress() {
			return this.homePostalAddress;
		}

		public String initials;

		public String getInitials() {
			return this.initials;
		}

		public String internationaliSDNNumber;

		public String getInternationaliSDNNumber() {
			return this.internationaliSDNNumber;
		}

		public String jpegPhoto;

		public String getJpegPhoto() {
			return this.jpegPhoto;
		}

		public String labeledURI;

		public String getLabeledURI() {
			return this.labeledURI;
		}

		public String mail;

		public String getMail() {
			return this.mail;
		}

		public String manager;

		public String getManager() {
			return this.manager;
		}

		public String member;

		public String getMember() {
			return this.member;
		}

		public String mobile;

		public String getMobile() {
			return this.mobile;
		}

		public String oAthSecret;

		public String getOAthSecret() {
			return this.oAthSecret;
		}

		public String oAthTokenID;

		public String getOAthTokenID() {
			return this.oAthTokenID;
		}

		public String objectClass;

		public String getObjectClass() {
			return this.objectClass;
		}

		public String owner;

		public String getOwner() {
			return this.owner;
		}

		public String pager;

		public String getPager() {
			return this.pager;
		}

		public String person;

		public String getPerson() {
			return this.person;
		}

		public String photo;

		public String getPhoto() {
			return this.photo;
		}

		public String physicalDeliveryOfficeName;

		public String getPhysicalDeliveryOfficeName() {
			return this.physicalDeliveryOfficeName;
		}

		public String postOfficeBox;

		public String getPostOfficeBox() {
			return this.postOfficeBox;
		}

		public String postalAddress;

		public String getPostalAddress() {
			return this.postalAddress;
		}

		public String postalCode;

		public String getPostalCode() {
			return this.postalCode;
		}

		public String preferredDeliveryMethod;

		public String getPreferredDeliveryMethod() {
			return this.preferredDeliveryMethod;
		}

		public String preferredLanguage;

		public String getPreferredLanguage() {
			return this.preferredLanguage;
		}

		public String registeredAddress;

		public String getRegisteredAddress() {
			return this.registeredAddress;
		}

		public String roomNumber;

		public String getRoomNumber() {
			return this.roomNumber;
		}

		public String searchGuide;

		public String getSearchGuide() {
			return this.searchGuide;
		}

		public String secretary;

		public String getSecretary() {
			return this.secretary;
		}

		public String seeAlso;

		public String getSeeAlso() {
			return this.seeAlso;
		}

		public String sn;

		public String getSn() {
			return this.sn;
		}

		public String st;

		public String getSt() {
			return this.st;
		}

		public String street;

		public String getStreet() {
			return this.street;
		}

		public String telephoneNumber;

		public String getTelephoneNumber() {
			return this.telephoneNumber;
		}

		public String teletexTerminalIdentifier;

		public String getTeletexTerminalIdentifier() {
			return this.teletexTerminalIdentifier;
		}

		public String telexNumber;

		public String getTelexNumber() {
			return this.telexNumber;
		}

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String top;

		public String getTop() {
			return this.top;
		}

		public String uid;

		public String getUid() {
			return this.uid;
		}

		public String userCertificate;

		public String getUserCertificate() {
			return this.userCertificate;
		}

		public String userPKCS12;

		public String getUserPKCS12() {
			return this.userPKCS12;
		}

		public String userPassword;

		public String getUserPassword() {
			return this.userPassword;
		}

		public String userSMIMECertificate;

		public String getUserSMIMECertificate() {
			return this.userSMIMECertificate;
		}

		public String x121Address;

		public String getX121Address() {
			return this.x121Address;
		}

		public String x500UniqueIdentifier;

		public String getX500UniqueIdentifier() {
			return this.x500UniqueIdentifier;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MOT2_FlushLDAP.length) {
					if (length < 1024
							&& commonByteArray_MOT2_FlushLDAP.length == 0) {
						commonByteArray_MOT2_FlushLDAP = new byte[1024];
					} else {
						commonByteArray_MOT2_FlushLDAP = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MOT2_FlushLDAP, 0, length);
				strReturn = new String(commonByteArray_MOT2_FlushLDAP, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MOT2_FlushLDAP) {

				try {

					int length = 0;

					this.oAthCounter = readString(dis);

					this.associatedName = readString(dis);

					this.audio = readString(dis);

					this.businessCategory = readString(dis);

					this.carLicense = readString(dis);

					this.cn = readString(dis);

					this.dc = readString(dis);

					this.departmentNumber = readString(dis);

					this.description = readString(dis);

					this.destinationIndicator = readString(dis);

					this.displayName = readString(dis);

					this.domain = readString(dis);

					this.employeeNumber = readString(dis);

					this.employeeType = readString(dis);

					this.facsimileTelephoneNumber = readString(dis);

					this.givenName = readString(dis);

					this.groupOfNames = readString(dis);

					this.homePhone = readString(dis);

					this.homePostalAddress = readString(dis);

					this.initials = readString(dis);

					this.internationaliSDNNumber = readString(dis);

					this.jpegPhoto = readString(dis);

					this.labeledURI = readString(dis);

					this.mail = readString(dis);

					this.manager = readString(dis);

					this.member = readString(dis);

					this.mobile = readString(dis);

					this.oAthSecret = readString(dis);

					this.oAthTokenID = readString(dis);

					this.objectClass = readString(dis);

					this.owner = readString(dis);

					this.pager = readString(dis);

					this.person = readString(dis);

					this.photo = readString(dis);

					this.physicalDeliveryOfficeName = readString(dis);

					this.postOfficeBox = readString(dis);

					this.postalAddress = readString(dis);

					this.postalCode = readString(dis);

					this.preferredDeliveryMethod = readString(dis);

					this.preferredLanguage = readString(dis);

					this.registeredAddress = readString(dis);

					this.roomNumber = readString(dis);

					this.searchGuide = readString(dis);

					this.secretary = readString(dis);

					this.seeAlso = readString(dis);

					this.sn = readString(dis);

					this.st = readString(dis);

					this.street = readString(dis);

					this.telephoneNumber = readString(dis);

					this.teletexTerminalIdentifier = readString(dis);

					this.telexNumber = readString(dis);

					this.title = readString(dis);

					this.top = readString(dis);

					this.uid = readString(dis);

					this.userCertificate = readString(dis);

					this.userPKCS12 = readString(dis);

					this.userPassword = readString(dis);

					this.userSMIMECertificate = readString(dis);

					this.x121Address = readString(dis);

					this.x500UniqueIdentifier = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.oAthCounter, dos);

				// String

				writeString(this.associatedName, dos);

				// String

				writeString(this.audio, dos);

				// String

				writeString(this.businessCategory, dos);

				// String

				writeString(this.carLicense, dos);

				// String

				writeString(this.cn, dos);

				// String

				writeString(this.dc, dos);

				// String

				writeString(this.departmentNumber, dos);

				// String

				writeString(this.description, dos);

				// String

				writeString(this.destinationIndicator, dos);

				// String

				writeString(this.displayName, dos);

				// String

				writeString(this.domain, dos);

				// String

				writeString(this.employeeNumber, dos);

				// String

				writeString(this.employeeType, dos);

				// String

				writeString(this.facsimileTelephoneNumber, dos);

				// String

				writeString(this.givenName, dos);

				// String

				writeString(this.groupOfNames, dos);

				// String

				writeString(this.homePhone, dos);

				// String

				writeString(this.homePostalAddress, dos);

				// String

				writeString(this.initials, dos);

				// String

				writeString(this.internationaliSDNNumber, dos);

				// String

				writeString(this.jpegPhoto, dos);

				// String

				writeString(this.labeledURI, dos);

				// String

				writeString(this.mail, dos);

				// String

				writeString(this.manager, dos);

				// String

				writeString(this.member, dos);

				// String

				writeString(this.mobile, dos);

				// String

				writeString(this.oAthSecret, dos);

				// String

				writeString(this.oAthTokenID, dos);

				// String

				writeString(this.objectClass, dos);

				// String

				writeString(this.owner, dos);

				// String

				writeString(this.pager, dos);

				// String

				writeString(this.person, dos);

				// String

				writeString(this.photo, dos);

				// String

				writeString(this.physicalDeliveryOfficeName, dos);

				// String

				writeString(this.postOfficeBox, dos);

				// String

				writeString(this.postalAddress, dos);

				// String

				writeString(this.postalCode, dos);

				// String

				writeString(this.preferredDeliveryMethod, dos);

				// String

				writeString(this.preferredLanguage, dos);

				// String

				writeString(this.registeredAddress, dos);

				// String

				writeString(this.roomNumber, dos);

				// String

				writeString(this.searchGuide, dos);

				// String

				writeString(this.secretary, dos);

				// String

				writeString(this.seeAlso, dos);

				// String

				writeString(this.sn, dos);

				// String

				writeString(this.st, dos);

				// String

				writeString(this.street, dos);

				// String

				writeString(this.telephoneNumber, dos);

				// String

				writeString(this.teletexTerminalIdentifier, dos);

				// String

				writeString(this.telexNumber, dos);

				// String

				writeString(this.title, dos);

				// String

				writeString(this.top, dos);

				// String

				writeString(this.uid, dos);

				// String

				writeString(this.userCertificate, dos);

				// String

				writeString(this.userPKCS12, dos);

				// String

				writeString(this.userPassword, dos);

				// String

				writeString(this.userSMIMECertificate, dos);

				// String

				writeString(this.x121Address, dos);

				// String

				writeString(this.x500UniqueIdentifier, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("oAthCounter=" + oAthCounter);
			sb.append(",associatedName=" + associatedName);
			sb.append(",audio=" + audio);
			sb.append(",businessCategory=" + businessCategory);
			sb.append(",carLicense=" + carLicense);
			sb.append(",cn=" + cn);
			sb.append(",dc=" + dc);
			sb.append(",departmentNumber=" + departmentNumber);
			sb.append(",description=" + description);
			sb.append(",destinationIndicator=" + destinationIndicator);
			sb.append(",displayName=" + displayName);
			sb.append(",domain=" + domain);
			sb.append(",employeeNumber=" + employeeNumber);
			sb.append(",employeeType=" + employeeType);
			sb.append(",facsimileTelephoneNumber=" + facsimileTelephoneNumber);
			sb.append(",givenName=" + givenName);
			sb.append(",groupOfNames=" + groupOfNames);
			sb.append(",homePhone=" + homePhone);
			sb.append(",homePostalAddress=" + homePostalAddress);
			sb.append(",initials=" + initials);
			sb.append(",internationaliSDNNumber=" + internationaliSDNNumber);
			sb.append(",jpegPhoto=" + jpegPhoto);
			sb.append(",labeledURI=" + labeledURI);
			sb.append(",mail=" + mail);
			sb.append(",manager=" + manager);
			sb.append(",member=" + member);
			sb.append(",mobile=" + mobile);
			sb.append(",oAthSecret=" + oAthSecret);
			sb.append(",oAthTokenID=" + oAthTokenID);
			sb.append(",objectClass=" + objectClass);
			sb.append(",owner=" + owner);
			sb.append(",pager=" + pager);
			sb.append(",person=" + person);
			sb.append(",photo=" + photo);
			sb.append(",physicalDeliveryOfficeName="
					+ physicalDeliveryOfficeName);
			sb.append(",postOfficeBox=" + postOfficeBox);
			sb.append(",postalAddress=" + postalAddress);
			sb.append(",postalCode=" + postalCode);
			sb.append(",preferredDeliveryMethod=" + preferredDeliveryMethod);
			sb.append(",preferredLanguage=" + preferredLanguage);
			sb.append(",registeredAddress=" + registeredAddress);
			sb.append(",roomNumber=" + roomNumber);
			sb.append(",searchGuide=" + searchGuide);
			sb.append(",secretary=" + secretary);
			sb.append(",seeAlso=" + seeAlso);
			sb.append(",sn=" + sn);
			sb.append(",st=" + st);
			sb.append(",street=" + street);
			sb.append(",telephoneNumber=" + telephoneNumber);
			sb.append(",teletexTerminalIdentifier=" + teletexTerminalIdentifier);
			sb.append(",telexNumber=" + telexNumber);
			sb.append(",title=" + title);
			sb.append(",top=" + top);
			sb.append(",uid=" + uid);
			sb.append(",userCertificate=" + userCertificate);
			sb.append(",userPKCS12=" + userPKCS12);
			sb.append(",userPassword=" + userPassword);
			sb.append(",userSMIMECertificate=" + userSMIMECertificate);
			sb.append(",x121Address=" + x121Address);
			sb.append(",x500UniqueIdentifier=" + x500UniqueIdentifier);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(removalListStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_MOT2_FlushLDAP = new byte[0];
		static byte[] commonByteArray_MOT2_FlushLDAP = new byte[0];

		public String oAthCounter;

		public String getOAthCounter() {
			return this.oAthCounter;
		}

		public String associatedName;

		public String getAssociatedName() {
			return this.associatedName;
		}

		public String audio;

		public String getAudio() {
			return this.audio;
		}

		public String businessCategory;

		public String getBusinessCategory() {
			return this.businessCategory;
		}

		public String carLicense;

		public String getCarLicense() {
			return this.carLicense;
		}

		public String cn;

		public String getCn() {
			return this.cn;
		}

		public String dc;

		public String getDc() {
			return this.dc;
		}

		public String departmentNumber;

		public String getDepartmentNumber() {
			return this.departmentNumber;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String destinationIndicator;

		public String getDestinationIndicator() {
			return this.destinationIndicator;
		}

		public String displayName;

		public String getDisplayName() {
			return this.displayName;
		}

		public String domain;

		public String getDomain() {
			return this.domain;
		}

		public String employeeNumber;

		public String getEmployeeNumber() {
			return this.employeeNumber;
		}

		public String employeeType;

		public String getEmployeeType() {
			return this.employeeType;
		}

		public String facsimileTelephoneNumber;

		public String getFacsimileTelephoneNumber() {
			return this.facsimileTelephoneNumber;
		}

		public String givenName;

		public String getGivenName() {
			return this.givenName;
		}

		public String groupOfNames;

		public String getGroupOfNames() {
			return this.groupOfNames;
		}

		public String homePhone;

		public String getHomePhone() {
			return this.homePhone;
		}

		public String homePostalAddress;

		public String getHomePostalAddress() {
			return this.homePostalAddress;
		}

		public String initials;

		public String getInitials() {
			return this.initials;
		}

		public String internationaliSDNNumber;

		public String getInternationaliSDNNumber() {
			return this.internationaliSDNNumber;
		}

		public String jpegPhoto;

		public String getJpegPhoto() {
			return this.jpegPhoto;
		}

		public String labeledURI;

		public String getLabeledURI() {
			return this.labeledURI;
		}

		public String mail;

		public String getMail() {
			return this.mail;
		}

		public String manager;

		public String getManager() {
			return this.manager;
		}

		public String member;

		public String getMember() {
			return this.member;
		}

		public String mobile;

		public String getMobile() {
			return this.mobile;
		}

		public String oAthSecret;

		public String getOAthSecret() {
			return this.oAthSecret;
		}

		public String oAthTokenID;

		public String getOAthTokenID() {
			return this.oAthTokenID;
		}

		public String objectClass;

		public String getObjectClass() {
			return this.objectClass;
		}

		public String owner;

		public String getOwner() {
			return this.owner;
		}

		public String pager;

		public String getPager() {
			return this.pager;
		}

		public String person;

		public String getPerson() {
			return this.person;
		}

		public String photo;

		public String getPhoto() {
			return this.photo;
		}

		public String physicalDeliveryOfficeName;

		public String getPhysicalDeliveryOfficeName() {
			return this.physicalDeliveryOfficeName;
		}

		public String postOfficeBox;

		public String getPostOfficeBox() {
			return this.postOfficeBox;
		}

		public String postalAddress;

		public String getPostalAddress() {
			return this.postalAddress;
		}

		public String postalCode;

		public String getPostalCode() {
			return this.postalCode;
		}

		public String preferredDeliveryMethod;

		public String getPreferredDeliveryMethod() {
			return this.preferredDeliveryMethod;
		}

		public String preferredLanguage;

		public String getPreferredLanguage() {
			return this.preferredLanguage;
		}

		public String registeredAddress;

		public String getRegisteredAddress() {
			return this.registeredAddress;
		}

		public String roomNumber;

		public String getRoomNumber() {
			return this.roomNumber;
		}

		public String searchGuide;

		public String getSearchGuide() {
			return this.searchGuide;
		}

		public String secretary;

		public String getSecretary() {
			return this.secretary;
		}

		public String seeAlso;

		public String getSeeAlso() {
			return this.seeAlso;
		}

		public String sn;

		public String getSn() {
			return this.sn;
		}

		public String st;

		public String getSt() {
			return this.st;
		}

		public String street;

		public String getStreet() {
			return this.street;
		}

		public String telephoneNumber;

		public String getTelephoneNumber() {
			return this.telephoneNumber;
		}

		public String teletexTerminalIdentifier;

		public String getTeletexTerminalIdentifier() {
			return this.teletexTerminalIdentifier;
		}

		public String telexNumber;

		public String getTelexNumber() {
			return this.telexNumber;
		}

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String top;

		public String getTop() {
			return this.top;
		}

		public String uid;

		public String getUid() {
			return this.uid;
		}

		public String userCertificate;

		public String getUserCertificate() {
			return this.userCertificate;
		}

		public String userPKCS12;

		public String getUserPKCS12() {
			return this.userPKCS12;
		}

		public String userPassword;

		public String getUserPassword() {
			return this.userPassword;
		}

		public String userSMIMECertificate;

		public String getUserSMIMECertificate() {
			return this.userSMIMECertificate;
		}

		public String x121Address;

		public String getX121Address() {
			return this.x121Address;
		}

		public String x500UniqueIdentifier;

		public String getX500UniqueIdentifier() {
			return this.x500UniqueIdentifier;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MOT2_FlushLDAP.length) {
					if (length < 1024
							&& commonByteArray_MOT2_FlushLDAP.length == 0) {
						commonByteArray_MOT2_FlushLDAP = new byte[1024];
					} else {
						commonByteArray_MOT2_FlushLDAP = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MOT2_FlushLDAP, 0, length);
				strReturn = new String(commonByteArray_MOT2_FlushLDAP, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MOT2_FlushLDAP) {

				try {

					int length = 0;

					this.oAthCounter = readString(dis);

					this.associatedName = readString(dis);

					this.audio = readString(dis);

					this.businessCategory = readString(dis);

					this.carLicense = readString(dis);

					this.cn = readString(dis);

					this.dc = readString(dis);

					this.departmentNumber = readString(dis);

					this.description = readString(dis);

					this.destinationIndicator = readString(dis);

					this.displayName = readString(dis);

					this.domain = readString(dis);

					this.employeeNumber = readString(dis);

					this.employeeType = readString(dis);

					this.facsimileTelephoneNumber = readString(dis);

					this.givenName = readString(dis);

					this.groupOfNames = readString(dis);

					this.homePhone = readString(dis);

					this.homePostalAddress = readString(dis);

					this.initials = readString(dis);

					this.internationaliSDNNumber = readString(dis);

					this.jpegPhoto = readString(dis);

					this.labeledURI = readString(dis);

					this.mail = readString(dis);

					this.manager = readString(dis);

					this.member = readString(dis);

					this.mobile = readString(dis);

					this.oAthSecret = readString(dis);

					this.oAthTokenID = readString(dis);

					this.objectClass = readString(dis);

					this.owner = readString(dis);

					this.pager = readString(dis);

					this.person = readString(dis);

					this.photo = readString(dis);

					this.physicalDeliveryOfficeName = readString(dis);

					this.postOfficeBox = readString(dis);

					this.postalAddress = readString(dis);

					this.postalCode = readString(dis);

					this.preferredDeliveryMethod = readString(dis);

					this.preferredLanguage = readString(dis);

					this.registeredAddress = readString(dis);

					this.roomNumber = readString(dis);

					this.searchGuide = readString(dis);

					this.secretary = readString(dis);

					this.seeAlso = readString(dis);

					this.sn = readString(dis);

					this.st = readString(dis);

					this.street = readString(dis);

					this.telephoneNumber = readString(dis);

					this.teletexTerminalIdentifier = readString(dis);

					this.telexNumber = readString(dis);

					this.title = readString(dis);

					this.top = readString(dis);

					this.uid = readString(dis);

					this.userCertificate = readString(dis);

					this.userPKCS12 = readString(dis);

					this.userPassword = readString(dis);

					this.userSMIMECertificate = readString(dis);

					this.x121Address = readString(dis);

					this.x500UniqueIdentifier = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.oAthCounter, dos);

				// String

				writeString(this.associatedName, dos);

				// String

				writeString(this.audio, dos);

				// String

				writeString(this.businessCategory, dos);

				// String

				writeString(this.carLicense, dos);

				// String

				writeString(this.cn, dos);

				// String

				writeString(this.dc, dos);

				// String

				writeString(this.departmentNumber, dos);

				// String

				writeString(this.description, dos);

				// String

				writeString(this.destinationIndicator, dos);

				// String

				writeString(this.displayName, dos);

				// String

				writeString(this.domain, dos);

				// String

				writeString(this.employeeNumber, dos);

				// String

				writeString(this.employeeType, dos);

				// String

				writeString(this.facsimileTelephoneNumber, dos);

				// String

				writeString(this.givenName, dos);

				// String

				writeString(this.groupOfNames, dos);

				// String

				writeString(this.homePhone, dos);

				// String

				writeString(this.homePostalAddress, dos);

				// String

				writeString(this.initials, dos);

				// String

				writeString(this.internationaliSDNNumber, dos);

				// String

				writeString(this.jpegPhoto, dos);

				// String

				writeString(this.labeledURI, dos);

				// String

				writeString(this.mail, dos);

				// String

				writeString(this.manager, dos);

				// String

				writeString(this.member, dos);

				// String

				writeString(this.mobile, dos);

				// String

				writeString(this.oAthSecret, dos);

				// String

				writeString(this.oAthTokenID, dos);

				// String

				writeString(this.objectClass, dos);

				// String

				writeString(this.owner, dos);

				// String

				writeString(this.pager, dos);

				// String

				writeString(this.person, dos);

				// String

				writeString(this.photo, dos);

				// String

				writeString(this.physicalDeliveryOfficeName, dos);

				// String

				writeString(this.postOfficeBox, dos);

				// String

				writeString(this.postalAddress, dos);

				// String

				writeString(this.postalCode, dos);

				// String

				writeString(this.preferredDeliveryMethod, dos);

				// String

				writeString(this.preferredLanguage, dos);

				// String

				writeString(this.registeredAddress, dos);

				// String

				writeString(this.roomNumber, dos);

				// String

				writeString(this.searchGuide, dos);

				// String

				writeString(this.secretary, dos);

				// String

				writeString(this.seeAlso, dos);

				// String

				writeString(this.sn, dos);

				// String

				writeString(this.st, dos);

				// String

				writeString(this.street, dos);

				// String

				writeString(this.telephoneNumber, dos);

				// String

				writeString(this.teletexTerminalIdentifier, dos);

				// String

				writeString(this.telexNumber, dos);

				// String

				writeString(this.title, dos);

				// String

				writeString(this.top, dos);

				// String

				writeString(this.uid, dos);

				// String

				writeString(this.userCertificate, dos);

				// String

				writeString(this.userPKCS12, dos);

				// String

				writeString(this.userPassword, dos);

				// String

				writeString(this.userSMIMECertificate, dos);

				// String

				writeString(this.x121Address, dos);

				// String

				writeString(this.x500UniqueIdentifier, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("oAthCounter=" + oAthCounter);
			sb.append(",associatedName=" + associatedName);
			sb.append(",audio=" + audio);
			sb.append(",businessCategory=" + businessCategory);
			sb.append(",carLicense=" + carLicense);
			sb.append(",cn=" + cn);
			sb.append(",dc=" + dc);
			sb.append(",departmentNumber=" + departmentNumber);
			sb.append(",description=" + description);
			sb.append(",destinationIndicator=" + destinationIndicator);
			sb.append(",displayName=" + displayName);
			sb.append(",domain=" + domain);
			sb.append(",employeeNumber=" + employeeNumber);
			sb.append(",employeeType=" + employeeType);
			sb.append(",facsimileTelephoneNumber=" + facsimileTelephoneNumber);
			sb.append(",givenName=" + givenName);
			sb.append(",groupOfNames=" + groupOfNames);
			sb.append(",homePhone=" + homePhone);
			sb.append(",homePostalAddress=" + homePostalAddress);
			sb.append(",initials=" + initials);
			sb.append(",internationaliSDNNumber=" + internationaliSDNNumber);
			sb.append(",jpegPhoto=" + jpegPhoto);
			sb.append(",labeledURI=" + labeledURI);
			sb.append(",mail=" + mail);
			sb.append(",manager=" + manager);
			sb.append(",member=" + member);
			sb.append(",mobile=" + mobile);
			sb.append(",oAthSecret=" + oAthSecret);
			sb.append(",oAthTokenID=" + oAthTokenID);
			sb.append(",objectClass=" + objectClass);
			sb.append(",owner=" + owner);
			sb.append(",pager=" + pager);
			sb.append(",person=" + person);
			sb.append(",photo=" + photo);
			sb.append(",physicalDeliveryOfficeName="
					+ physicalDeliveryOfficeName);
			sb.append(",postOfficeBox=" + postOfficeBox);
			sb.append(",postalAddress=" + postalAddress);
			sb.append(",postalCode=" + postalCode);
			sb.append(",preferredDeliveryMethod=" + preferredDeliveryMethod);
			sb.append(",preferredLanguage=" + preferredLanguage);
			sb.append(",registeredAddress=" + registeredAddress);
			sb.append(",roomNumber=" + roomNumber);
			sb.append(",searchGuide=" + searchGuide);
			sb.append(",secretary=" + secretary);
			sb.append(",seeAlso=" + seeAlso);
			sb.append(",sn=" + sn);
			sb.append(",st=" + st);
			sb.append(",street=" + street);
			sb.append(",telephoneNumber=" + telephoneNumber);
			sb.append(",teletexTerminalIdentifier=" + teletexTerminalIdentifier);
			sb.append(",telexNumber=" + telexNumber);
			sb.append(",title=" + title);
			sb.append(",top=" + top);
			sb.append(",uid=" + uid);
			sb.append(",userCertificate=" + userCertificate);
			sb.append(",userPKCS12=" + userPKCS12);
			sb.append(",userPassword=" + userPassword);
			sb.append(",userSMIMECertificate=" + userSMIMECertificate);
			sb.append(",x121Address=" + x121Address);
			sb.append(",x500UniqueIdentifier=" + x500UniqueIdentifier);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tLDAPInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLDAPInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				removalListStruct removalList = new removalListStruct();

				/**
				 * [tLDAPOutput_1 begin ] start
				 */

				ok_Hash.put("tLDAPOutput_1", false);
				start_Hash.put("tLDAPOutput_1", System.currentTimeMillis());

				currentComponent = "tLDAPOutput_1";

				int tos_count_tLDAPOutput_1 = 0;

				java.util.Hashtable env_tLDAPOutput_1 = new java.util.Hashtable();
				env_tLDAPOutput_1.put(
						javax.naming.Context.INITIAL_CONTEXT_FACTORY,
						"com.sun.jndi.ldap.LdapCtxFactory");
				env_tLDAPOutput_1.put(
						javax.naming.Context.SECURITY_AUTHENTICATION, "simple");// "none","simple","strong"
				env_tLDAPOutput_1.put(javax.naming.Context.SECURITY_PRINCIPAL,
						"cn=Directory Manager");

				final String decryptedPassword_tLDAPOutput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("70822b71caacb006883ac8c2b0c2b0f5");
				env_tLDAPOutput_1.put(
						javax.naming.Context.SECURITY_CREDENTIALS,
						decryptedPassword_tLDAPOutput_1);
				env_tLDAPOutput_1.put(javax.naming.Context.REFERRAL, "ignore");
				env_tLDAPOutput_1
						.put("java.naming.ldap.derefAliases", "always");
				String baseDN_tLDAPOutput_1 = "ou=" + context.ldapOU
						+ ",dc=mot,dc=gov,dc=uk";
				env_tLDAPOutput_1.put(javax.naming.Context.PROVIDER_URL,
						"ldap://" + context.ldapHost + ":" + 1389 + "/" + "ou="
								+ context.ldapOU + ",dc=mot,dc=gov,dc=uk");
				javax.naming.ldap.InitialLdapContext ctx_tLDAPOutput_1 = new javax.naming.ldap.InitialLdapContext(
						env_tLDAPOutput_1, null);
				boolean whetherReject_tLDAPOutput_1 = false;
				int nb_line_tLDAPOutput_1 = 0;
				talend.ssl.ldap.LdapAction ldap_tLDAPOutput_1 = new talend.ssl.ldap.LdapAction();
				// check is base64 begin
				class CheckBase64_tLDAPOutput_1 {
					public void checkByteArray(boolean isBase64,
							String columnName,
							javax.naming.directory.Attributes entry,
							byte[] bytearray)
							throws com.sun.org.apache.xml.internal.security.exceptions.Base64DecodingException {
						if (isBase64) {
							entry.put(
									columnName,
									com.sun.org.apache.xml.internal.security.utils.Base64
											.decode(bytearray));
						} else {
							entry.put(columnName, bytearray);
						}
					}

					public void checkString(boolean isBase64,
							String columnName,
							javax.naming.directory.Attributes entry,
							String inputValue)
							throws com.sun.org.apache.xml.internal.security.exceptions.Base64DecodingException {
						if (isBase64) {
							entry.put(
									columnName,
									com.sun.org.apache.xml.internal.security.utils.Base64
											.decode(inputValue));
						} else {
							entry.put(columnName, inputValue);
						}
					}

					public void addToAttribute(boolean isBase64,
							javax.naming.directory.Attribute attr,
							String inputValue)
							throws com.sun.org.apache.xml.internal.security.exceptions.Base64DecodingException {
						if (isBase64) {
							attr.add(com.sun.org.apache.xml.internal.security.utils.Base64
									.decode(inputValue));
						} else {
							attr.add(inputValue);
						}
					}

					public void checkByteArrayUpdate(boolean isBase64,
							String columnName,
							List<javax.naming.directory.Attribute> forUpate,
							byte[] bytearray)
							throws com.sun.org.apache.xml.internal.security.exceptions.Base64DecodingException {
						if (isBase64) {
							forUpate.add(new javax.naming.directory.BasicAttribute(
									columnName,
									com.sun.org.apache.xml.internal.security.utils.Base64
											.decode(bytearray)));
						} else {
							forUpate.add(new javax.naming.directory.BasicAttribute(
									columnName, bytearray));
						}
					}

					public void checkStringUpdate(boolean isBase64,
							String columnName,
							List<javax.naming.directory.Attribute> forUpate,
							String inputValue)
							throws com.sun.org.apache.xml.internal.security.exceptions.Base64DecodingException {
						if (isBase64) {
							forUpate.add(new javax.naming.directory.BasicAttribute(
									columnName,
									com.sun.org.apache.xml.internal.security.utils.Base64
											.decode(inputValue)));
						} else {
							forUpate.add(new javax.naming.directory.BasicAttribute(
									columnName, inputValue));
						}
					}

					public void checkStringUpdateAttr(boolean isBase64,
							String columnName,
							javax.naming.directory.Attribute attrForUpdate,
							String inputValue)
							throws com.sun.org.apache.xml.internal.security.exceptions.Base64DecodingException {
						if (isBase64) {
							attrForUpdate
									.add(com.sun.org.apache.xml.internal.security.utils.Base64
											.decode(inputValue));
						} else {
							attrForUpdate.add(inputValue);
						}
					}

					public String filterNullElement(String srcData,
							String splitStr) {
						String result = "";
						String[] tempArr = routines.system.StringUtils
								.splitNotRegex(srcData, splitStr);
						for (int i = 0; i < tempArr.length; i++) {
							if (tempArr[i] != null
									&& !"".equals(tempArr[i].trim())) {
								if (!"".equals(result)) {
									result = result + splitStr;
								}
								result = result + tempArr[i];
							}
						}
						return result;
					}
				}
				CheckBase64_tLDAPOutput_1 base64_tLDAPOutput_1 = new CheckBase64_tLDAPOutput_1();
				// check is base64 end

				/**
				 * [tLDAPOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				removalListStruct removalList_tmp = new removalListStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tLDAPInput_1 begin ] start
				 */

				ok_Hash.put("tLDAPInput_1", false);
				start_Hash.put("tLDAPInput_1", System.currentTimeMillis());

				currentComponent = "tLDAPInput_1";

				int tos_count_tLDAPInput_1 = 0;

				String baseDN_tLDAPInput_1 = "";
				int tLDAPInput_1_NB_LINE = 0;
				java.util.Hashtable env_tLDAPInput_1 = new java.util.Hashtable();
				env_tLDAPInput_1.put(
						javax.naming.Context.INITIAL_CONTEXT_FACTORY,
						"com.sun.jndi.ldap.LdapCtxFactory");
				env_tLDAPInput_1.put(
						javax.naming.Context.SECURITY_AUTHENTICATION, "simple");// "none","simple","strong"
				env_tLDAPInput_1.put(javax.naming.Context.REFERRAL, "ignore");
				env_tLDAPInput_1.put("java.naming.ldap.derefAliases", "always");
				env_tLDAPInput_1.put(javax.naming.Context.PROVIDER_URL,
						"ldap://" + context.ldapHost + ":" + 1389);
				env_tLDAPInput_1.put(javax.naming.Context.SECURITY_PRINCIPAL,
						"cn=Directory Manager");

				final String decryptedPassword_tLDAPInput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("70822b71caacb006883ac8c2b0c2b0f5");
				env_tLDAPInput_1.put(javax.naming.Context.SECURITY_CREDENTIALS,
						decryptedPassword_tLDAPInput_1);

				javax.naming.ldap.InitialLdapContext ctx_tLDAPInput_1 = null;
				try {
					ctx_tLDAPInput_1 = new javax.naming.ldap.InitialLdapContext(
							env_tLDAPInput_1, null);

					javax.naming.directory.SearchControls searchCtls_tLDAPInput_1 = new javax.naming.directory.SearchControls();
					searchCtls_tLDAPInput_1
							.setSearchScope(javax.naming.directory.SearchControls.SUBTREE_SCOPE);
					searchCtls_tLDAPInput_1
							.setReturningAttributes(new String[] {
									"oAthCounter", "associatedName", "audio",
									"businessCategory", "carLicense", "cn",
									"dc", "departmentNumber", "description",
									"destinationIndicator", "displayName",
									"domain", "employeeNumber", "employeeType",
									"facsimileTelephoneNumber", "givenName",
									"groupOfNames", "homePhone",
									"homePostalAddress", "initials",
									"internationaliSDNNumber", "jpegPhoto",
									"labeledURI", "mail", "manager", "member",
									"mobile", "oAthSecret", "oAthTokenID",
									"objectClass", "owner", "pager", "person",
									"photo", "physicalDeliveryOfficeName",
									"postOfficeBox", "postalAddress",
									"postalCode", "preferredDeliveryMethod",
									"preferredLanguage", "registeredAddress",
									"roomNumber", "searchGuide", "secretary",
									"seeAlso", "sn", "st", "street",
									"telephoneNumber",
									"teletexTerminalIdentifier", "telexNumber",
									"title", "top", "uid", "userCertificate",
									"userPKCS12", "userPassword",
									"userSMIMECertificate", "x121Address",
									"x500UniqueIdentifier", });
					searchCtls_tLDAPInput_1.setTimeLimit(0 * 1000);
					searchCtls_tLDAPInput_1.setCountLimit(0);
					baseDN_tLDAPInput_1 = "ou=" + context.ldapOU
							+ ",dc=mot,dc=gov,dc=uk";

					javax.naming.NamingEnumeration answer_tLDAPInput_1 = ctx_tLDAPInput_1
							.search(baseDN_tLDAPInput_1, "(objectClass=*)",
									searchCtls_tLDAPInput_1);
					while (answer_tLDAPInput_1.hasMoreElements()) {// a
						row1 = null;
						tLDAPInput_1_NB_LINE++;
						javax.naming.directory.Attributes attrs_tLDAPInput_1 = null;
						row1 = new row1Struct();
						try {

							javax.naming.directory.SearchResult sr_tLDAPInput_1 = (javax.naming.directory.SearchResult) answer_tLDAPInput_1
									.next();
							globalMap.put("tLDAPInput_1_RESULT_NAME",
									sr_tLDAPInput_1.getName());
							attrs_tLDAPInput_1 = sr_tLDAPInput_1
									.getAttributes();
							// for output
							if (attrs_tLDAPInput_1 != null) {// b
								javax.naming.directory.Attribute attr_oAthCounter_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("oAthCounter");
								if (attr_oAthCounter_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_oAthCounter_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.oAthCounter = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.oAthCounter = null;
								}

								javax.naming.directory.Attribute attr_associatedName_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("associatedName");
								if (attr_associatedName_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_associatedName_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.associatedName = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.associatedName = null;
								}

								javax.naming.directory.Attribute attr_audio_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("audio");
								if (attr_audio_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_audio_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.audio = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.audio = null;
								}

								javax.naming.directory.Attribute attr_businessCategory_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("businessCategory");
								if (attr_businessCategory_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_businessCategory_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.businessCategory = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.businessCategory = null;
								}

								javax.naming.directory.Attribute attr_carLicense_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("carLicense");
								if (attr_carLicense_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_carLicense_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.carLicense = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.carLicense = null;
								}

								javax.naming.directory.Attribute attr_cn_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("cn");
								if (attr_cn_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_cn_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.cn = attrStr_tLDAPInput_1.toString();
								} else {
									row1.cn = null;
								}

								javax.naming.directory.Attribute attr_dc_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("dc");
								if (attr_dc_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_dc_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.dc = attrStr_tLDAPInput_1.toString();
								} else {
									row1.dc = null;
								}

								javax.naming.directory.Attribute attr_departmentNumber_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("departmentNumber");
								if (attr_departmentNumber_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_departmentNumber_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.departmentNumber = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.departmentNumber = null;
								}

								javax.naming.directory.Attribute attr_description_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("description");
								if (attr_description_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_description_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.description = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.description = null;
								}

								javax.naming.directory.Attribute attr_destinationIndicator_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("destinationIndicator");
								if (attr_destinationIndicator_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_destinationIndicator_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.destinationIndicator = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.destinationIndicator = null;
								}

								javax.naming.directory.Attribute attr_displayName_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("displayName");
								if (attr_displayName_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_displayName_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.displayName = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.displayName = null;
								}

								javax.naming.directory.Attribute attr_domain_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("domain");
								if (attr_domain_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_domain_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.domain = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.domain = null;
								}

								javax.naming.directory.Attribute attr_employeeNumber_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("employeeNumber");
								if (attr_employeeNumber_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_employeeNumber_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.employeeNumber = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.employeeNumber = null;
								}

								javax.naming.directory.Attribute attr_employeeType_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("employeeType");
								if (attr_employeeType_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_employeeType_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.employeeType = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.employeeType = null;
								}

								javax.naming.directory.Attribute attr_facsimileTelephoneNumber_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("facsimileTelephoneNumber");
								if (attr_facsimileTelephoneNumber_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_facsimileTelephoneNumber_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.facsimileTelephoneNumber = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.facsimileTelephoneNumber = null;
								}

								javax.naming.directory.Attribute attr_givenName_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("givenName");
								if (attr_givenName_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_givenName_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.givenName = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.givenName = null;
								}

								javax.naming.directory.Attribute attr_groupOfNames_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("groupOfNames");
								if (attr_groupOfNames_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_groupOfNames_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.groupOfNames = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.groupOfNames = null;
								}

								javax.naming.directory.Attribute attr_homePhone_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("homePhone");
								if (attr_homePhone_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_homePhone_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.homePhone = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.homePhone = null;
								}

								javax.naming.directory.Attribute attr_homePostalAddress_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("homePostalAddress");
								if (attr_homePostalAddress_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_homePostalAddress_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.homePostalAddress = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.homePostalAddress = null;
								}

								javax.naming.directory.Attribute attr_initials_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("initials");
								if (attr_initials_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_initials_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.initials = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.initials = null;
								}

								javax.naming.directory.Attribute attr_internationaliSDNNumber_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("internationaliSDNNumber");
								if (attr_internationaliSDNNumber_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_internationaliSDNNumber_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.internationaliSDNNumber = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.internationaliSDNNumber = null;
								}

								javax.naming.directory.Attribute attr_jpegPhoto_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("jpegPhoto");
								if (attr_jpegPhoto_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_jpegPhoto_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.jpegPhoto = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.jpegPhoto = null;
								}

								javax.naming.directory.Attribute attr_labeledURI_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("labeledURI");
								if (attr_labeledURI_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_labeledURI_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.labeledURI = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.labeledURI = null;
								}

								javax.naming.directory.Attribute attr_mail_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("mail");
								if (attr_mail_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_mail_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.mail = attrStr_tLDAPInput_1.toString();
								} else {
									row1.mail = null;
								}

								javax.naming.directory.Attribute attr_manager_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("manager");
								if (attr_manager_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_manager_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.manager = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.manager = null;
								}

								javax.naming.directory.Attribute attr_member_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("member");
								if (attr_member_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_member_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.member = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.member = null;
								}

								javax.naming.directory.Attribute attr_mobile_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("mobile");
								if (attr_mobile_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_mobile_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.mobile = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.mobile = null;
								}

								javax.naming.directory.Attribute attr_oAthSecret_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("oAthSecret");
								if (attr_oAthSecret_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_oAthSecret_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.oAthSecret = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.oAthSecret = null;
								}

								javax.naming.directory.Attribute attr_oAthTokenID_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("oAthTokenID");
								if (attr_oAthTokenID_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_oAthTokenID_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.oAthTokenID = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.oAthTokenID = null;
								}

								javax.naming.directory.Attribute attr_objectClass_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("objectClass");
								if (attr_objectClass_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_objectClass_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.objectClass = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.objectClass = null;
								}

								javax.naming.directory.Attribute attr_owner_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("owner");
								if (attr_owner_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_owner_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.owner = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.owner = null;
								}

								javax.naming.directory.Attribute attr_pager_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("pager");
								if (attr_pager_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_pager_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.pager = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.pager = null;
								}

								javax.naming.directory.Attribute attr_person_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("person");
								if (attr_person_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_person_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.person = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.person = null;
								}

								javax.naming.directory.Attribute attr_photo_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("photo");
								if (attr_photo_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_photo_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.photo = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.photo = null;
								}

								javax.naming.directory.Attribute attr_physicalDeliveryOfficeName_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("physicalDeliveryOfficeName");
								if (attr_physicalDeliveryOfficeName_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_physicalDeliveryOfficeName_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.physicalDeliveryOfficeName = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.physicalDeliveryOfficeName = null;
								}

								javax.naming.directory.Attribute attr_postOfficeBox_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("postOfficeBox");
								if (attr_postOfficeBox_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_postOfficeBox_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.postOfficeBox = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.postOfficeBox = null;
								}

								javax.naming.directory.Attribute attr_postalAddress_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("postalAddress");
								if (attr_postalAddress_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_postalAddress_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.postalAddress = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.postalAddress = null;
								}

								javax.naming.directory.Attribute attr_postalCode_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("postalCode");
								if (attr_postalCode_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_postalCode_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.postalCode = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.postalCode = null;
								}

								javax.naming.directory.Attribute attr_preferredDeliveryMethod_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("preferredDeliveryMethod");
								if (attr_preferredDeliveryMethod_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_preferredDeliveryMethod_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.preferredDeliveryMethod = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.preferredDeliveryMethod = null;
								}

								javax.naming.directory.Attribute attr_preferredLanguage_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("preferredLanguage");
								if (attr_preferredLanguage_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_preferredLanguage_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.preferredLanguage = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.preferredLanguage = null;
								}

								javax.naming.directory.Attribute attr_registeredAddress_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("registeredAddress");
								if (attr_registeredAddress_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_registeredAddress_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.registeredAddress = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.registeredAddress = null;
								}

								javax.naming.directory.Attribute attr_roomNumber_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("roomNumber");
								if (attr_roomNumber_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_roomNumber_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.roomNumber = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.roomNumber = null;
								}

								javax.naming.directory.Attribute attr_searchGuide_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("searchGuide");
								if (attr_searchGuide_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_searchGuide_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.searchGuide = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.searchGuide = null;
								}

								javax.naming.directory.Attribute attr_secretary_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("secretary");
								if (attr_secretary_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_secretary_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.secretary = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.secretary = null;
								}

								javax.naming.directory.Attribute attr_seeAlso_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("seeAlso");
								if (attr_seeAlso_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_seeAlso_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.seeAlso = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.seeAlso = null;
								}

								javax.naming.directory.Attribute attr_sn_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("sn");
								if (attr_sn_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_sn_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.sn = attrStr_tLDAPInput_1.toString();
								} else {
									row1.sn = null;
								}

								javax.naming.directory.Attribute attr_st_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("st");
								if (attr_st_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_st_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.st = attrStr_tLDAPInput_1.toString();
								} else {
									row1.st = null;
								}

								javax.naming.directory.Attribute attr_street_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("street");
								if (attr_street_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_street_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.street = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.street = null;
								}

								javax.naming.directory.Attribute attr_telephoneNumber_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("telephoneNumber");
								if (attr_telephoneNumber_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_telephoneNumber_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.telephoneNumber = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.telephoneNumber = null;
								}

								javax.naming.directory.Attribute attr_teletexTerminalIdentifier_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("teletexTerminalIdentifier");
								if (attr_teletexTerminalIdentifier_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_teletexTerminalIdentifier_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.teletexTerminalIdentifier = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.teletexTerminalIdentifier = null;
								}

								javax.naming.directory.Attribute attr_telexNumber_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("telexNumber");
								if (attr_telexNumber_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_telexNumber_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.telexNumber = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.telexNumber = null;
								}

								javax.naming.directory.Attribute attr_title_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("title");
								if (attr_title_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_title_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.title = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.title = null;
								}

								javax.naming.directory.Attribute attr_top_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("top");
								if (attr_top_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_top_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.top = attrStr_tLDAPInput_1.toString();
								} else {
									row1.top = null;
								}

								javax.naming.directory.Attribute attr_uid_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("uid");
								if (attr_uid_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_uid_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.uid = attrStr_tLDAPInput_1.toString();
								} else {
									row1.uid = null;
								}

								javax.naming.directory.Attribute attr_userCertificate_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("userCertificate");
								if (attr_userCertificate_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_userCertificate_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.userCertificate = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.userCertificate = null;
								}

								javax.naming.directory.Attribute attr_userPKCS12_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("userPKCS12");
								if (attr_userPKCS12_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_userPKCS12_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.userPKCS12 = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.userPKCS12 = null;
								}

								javax.naming.directory.Attribute attr_userPassword_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("userPassword");
								if (attr_userPassword_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_userPassword_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.userPassword = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.userPassword = null;
								}

								javax.naming.directory.Attribute attr_userSMIMECertificate_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("userSMIMECertificate");
								if (attr_userSMIMECertificate_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_userSMIMECertificate_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.userSMIMECertificate = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.userSMIMECertificate = null;
								}

								javax.naming.directory.Attribute attr_x121Address_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("x121Address");
								if (attr_x121Address_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_x121Address_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.x121Address = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.x121Address = null;
								}

								javax.naming.directory.Attribute attr_x500UniqueIdentifier_tLDAPInput_1 = attrs_tLDAPInput_1
										.get("x500UniqueIdentifier");
								if (attr_x500UniqueIdentifier_tLDAPInput_1 != null) {
									StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
									for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_x500UniqueIdentifier_tLDAPInput_1
											.getAll(); e_tLDAPInput_1.hasMore();) {
										if (attrStr_tLDAPInput_1.length() > 0) {
											attrStr_tLDAPInput_1.append(";");
										}
										attrStr_tLDAPInput_1
												.append(e_tLDAPInput_1.next()
														.toString());
									}
									row1.x500UniqueIdentifier = attrStr_tLDAPInput_1
											.toString();
								} else {
									row1.x500UniqueIdentifier = null;
								}

							}// b
						} catch (java.lang.Exception e) {

							throw (e);
						}
						// /////////////////////////////////

						/**
						 * [tLDAPInput_1 begin ] stop
						 */
						/**
						 * [tLDAPInput_1 main ] start
						 */

						currentComponent = "tLDAPInput_1";

						tos_count_tLDAPInput_1++;

						/**
						 * [tLDAPInput_1 main ] stop
						 */
						// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								removalList = null;

								// # Output table : 'removalList'
								removalList_tmp.oAthCounter = null;
								removalList_tmp.associatedName = null;
								removalList_tmp.audio = null;
								removalList_tmp.businessCategory = null;
								removalList_tmp.carLicense = null;
								removalList_tmp.cn = null;
								removalList_tmp.dc = null;
								removalList_tmp.departmentNumber = null;
								removalList_tmp.description = null;
								removalList_tmp.destinationIndicator = null;
								removalList_tmp.displayName = null;
								removalList_tmp.domain = null;
								removalList_tmp.employeeNumber = null;
								removalList_tmp.employeeType = null;
								removalList_tmp.facsimileTelephoneNumber = null;
								removalList_tmp.givenName = null;
								removalList_tmp.groupOfNames = null;
								removalList_tmp.homePhone = null;
								removalList_tmp.homePostalAddress = null;
								removalList_tmp.initials = null;
								removalList_tmp.internationaliSDNNumber = null;
								removalList_tmp.jpegPhoto = null;
								removalList_tmp.labeledURI = null;
								removalList_tmp.mail = null;
								removalList_tmp.manager = null;
								removalList_tmp.member = null;
								removalList_tmp.mobile = null;
								removalList_tmp.oAthSecret = null;
								removalList_tmp.oAthTokenID = null;
								removalList_tmp.objectClass = null;
								removalList_tmp.owner = null;
								removalList_tmp.pager = null;
								removalList_tmp.person = null;
								removalList_tmp.photo = null;
								removalList_tmp.physicalDeliveryOfficeName = null;
								removalList_tmp.postOfficeBox = null;
								removalList_tmp.postalAddress = null;
								removalList_tmp.postalCode = null;
								removalList_tmp.preferredDeliveryMethod = null;
								removalList_tmp.preferredLanguage = null;
								removalList_tmp.registeredAddress = null;
								removalList_tmp.roomNumber = null;
								removalList_tmp.searchGuide = null;
								removalList_tmp.secretary = null;
								removalList_tmp.seeAlso = null;
								removalList_tmp.sn = null;
								removalList_tmp.st = null;
								removalList_tmp.street = null;
								removalList_tmp.telephoneNumber = null;
								removalList_tmp.teletexTerminalIdentifier = null;
								removalList_tmp.telexNumber = null;
								removalList_tmp.title = null;
								removalList_tmp.top = null;
								removalList_tmp.uid = "uid=" + row1.uid;
								removalList_tmp.userCertificate = null;
								removalList_tmp.userPKCS12 = null;
								removalList_tmp.userPassword = null;
								removalList_tmp.userSMIMECertificate = null;
								removalList_tmp.x121Address = null;
								removalList_tmp.x500UniqueIdentifier = null;
								removalList = removalList_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */
							// Start of branch "removalList"
							if (removalList != null) {

								/**
								 * [tLDAPOutput_1 main ] start
								 */

								currentComponent = "tLDAPOutput_1";

								javax.naming.directory.Attributes entry_tLDAPOutput_1 = new javax.naming.directory.BasicAttributes(
										true);
								whetherReject_tLDAPOutput_1 = false;
								String dn_tLDAPOutput_1 = String.valueOf(
										removalList.uid).trim();
								try {
									// ctx_tLDAPOutput_1.destroySubcontext(dn_tLDAPOutput_1);
									int nb_line = 0;
									nb_line = ldap_tLDAPOutput_1.delete(
											dn_tLDAPOutput_1,
											"(objectclass=*)",
											ctx_tLDAPOutput_1,
											baseDN_tLDAPOutput_1);
									nb_line_tLDAPOutput_1 = nb_line_tLDAPOutput_1
											+ nb_line;
								} catch (java.lang.Exception e) {
									whetherReject_tLDAPOutput_1 = true;
									System.err.print(e.getMessage());
								}

								tos_count_tLDAPOutput_1++;

								/**
								 * [tLDAPOutput_1 main ] stop
								 */

							} // End of branch "removalList"

						} // End of branch "row1"

						/**
						 * [tLDAPInput_1 end ] start
						 */

						currentComponent = "tLDAPInput_1";

					}// a

				} catch (java.lang.Exception e) {
					throw new java.lang.Exception(e);
				} finally {
					if (ctx_tLDAPInput_1 != null) {
						ctx_tLDAPInput_1.close();
					}
				}
				globalMap.put("tLDAPInput_1_NB_LINE", tLDAPInput_1_NB_LINE);

				ok_Hash.put("tLDAPInput_1", true);
				end_Hash.put("tLDAPInput_1", System.currentTimeMillis());

				/**
				 * [tLDAPInput_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tLDAPOutput_1 end ] start
				 */

				currentComponent = "tLDAPOutput_1";

				ctx_tLDAPOutput_1.close();
				globalMap.put("tLDAPOutput_1_NB_LINE", nb_line_tLDAPOutput_1);

				ok_Hash.put("tLDAPOutput_1", true);
				end_Hash.put("tLDAPOutput_1", System.currentTimeMillis());

				/**
				 * [tLDAPOutput_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tLDAPInput_1 finally ] start
				 */

				currentComponent = "tLDAPInput_1";

				/**
				 * [tLDAPInput_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tLDAPOutput_1 finally ] start
				 */

				currentComponent = "tLDAPOutput_1";

				/**
				 * [tLDAPOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLDAPInput_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final FlushLDAP FlushLDAPClass = new FlushLDAP();

		int exitCode = FlushLDAPClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = FlushLDAP.class.getClassLoader()
					.getResourceAsStream(
							"mot2/flushldap_0_1/contexts/" + contextStr
									+ ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.databaseHost = (String) context.getProperty("databaseHost");
			context.databasePassword = (String) context
					.getProperty("databasePassword");
			try {
				context.databasePort = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("databasePort"));
			} catch (NumberFormatException e) {
				context.databasePort = null;
			}
			context.databaseUserName = (String) context
					.getProperty("databaseUserName");
			context.ldapHost = (String) context.getProperty("ldapHost");
			context.ldapOU = (String) context.getProperty("ldapOU");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("databaseHost")) {
				context.databaseHost = (String) parentContextMap
						.get("databaseHost");
			}
			if (parentContextMap.containsKey("databasePassword")) {
				context.databasePassword = (String) parentContextMap
						.get("databasePassword");
			}
			if (parentContextMap.containsKey("databasePort")) {
				context.databasePort = (Integer) parentContextMap
						.get("databasePort");
			}
			if (parentContextMap.containsKey("databaseUserName")) {
				context.databaseUserName = (String) parentContextMap
						.get("databaseUserName");
			}
			if (parentContextMap.containsKey("ldapHost")) {
				context.ldapHost = (String) parentContextMap.get("ldapHost");
			}
			if (parentContextMap.containsKey("ldapOU")) {
				context.ldapOU = (String) parentContextMap.get("ldapOU");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tLDAPInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tLDAPInput_1) {
			globalMap.put("tLDAPInput_1_SUBPROCESS_STATE", -1);

			e_tLDAPInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : FlushLDAP");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 113393 characters generated by Talend Open Studio for Data Integration on the
 * December 11, 2014 3:17:43 PM GMT
 ************************************************************************************************/
